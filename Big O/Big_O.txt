Big O
	Big O Cheetsheet
		Common Big Os
			O(1) Constant – no loops 
			O(log N) Logarithmic – usually searching algorithms have log n if they are sorted (Binary Search)
			O(n) Linear – for loops, while loops through n items
			O(n log(n)) Log Linear – usually sorting operations
			O(n^2) Quadratic – every element in a collection needs to be compared to every other element. Two nested loops
			O(2^n) Exponential – recursive algorithms that solves a problem of size N
			O(n!) Factorial – adding a loop for every element
			Iterating through half a collection is still O(n)
			Two separate collections: O(a * b)
		
		What Can Cause Time in a Function?
			Operations (+, -, *, /)
			Comparisons (<, >, ==)
			Looping (for, while)
			Outside Function call (function())
		
		Rules
			1. Always Worst Case
			2. Remove Constants
			3. Different inputs should have different variables: O(a + b) instead of O(n) for func (a,b) with O(n) for both a&b
				A and B arrays nested would be: O(a * b)
				+ for steps in order
				X for nested steps
			4. Drop Non-dominant terms

		What Causes Space Complexity?
			Variables
			Data Structures
			Function Call
			Allocations

	Notes

		Basic DS BigO: https://www.bigocheatsheet.com/
		
		Goood code:
			1. Readable
			2. Scalable
			     Time (Speed) 
			     Space (Memory) 

		Heap - Store variables that we assigned values to 
		Stack - Keep track of function calls

		Space Complexity: (is about the EXTRA space create, not considering the input)
			def fun(list):
				for i in range(len(list): 
				print(i)
			# this is O(1) in space
		
			def fun(list):
				newList = list() 
				for i in range(len(list): 
					newList[i] = "OK"
				return new List
			# this is O(n)